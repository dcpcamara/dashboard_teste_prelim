"Southeast" = "#A383D9",
"South" = "#DC8E4B"
)
pal <- colorFactor(palette = region_colors, domain = shape$region_en)
uf_labels <- ufshape |>
mutate(centroid = st_centroid(geom)) |>
st_drop_geometry() |>
bind_cols(st_coordinates(st_centroid(ufshape))) |>
select(name_state, abbrev_state, X, Y)
st_write(obj = shape, dsn = "data/gpkg_macro.gpkg", layer = "macro_shapes", driver = "GPKG", delete_dsn = TRUE)
st_write(obj = ufshape, dsn = "data/gpkg_uf.gpkg", layer = "uf_shapes", driver = "GPKG", delete_dsn = TRUE)
shape <- read_sf("data/gpkg_macro.gpkg")
ufshape <- read_sf("data/gpkg_uf.gpkg")
spatial.tbl <- import("data/spatial.tbl.csv")
shape <- read_sf('data/shapefile_macro.json') |>
left_join(spatial.tbl |>
select(uf, macroregional, macroregional_geocode) |>
unique() |>
rename(uf_name = uf), by = c('code_macro' = 'macroregional_geocode'))
ufshape <- read_state(
year = 2020,
showProgress = FALSE,
simplified = TRUE
)
ufshape <- ufshape |>
st_crop(xmin = -73.9904, ymin = -33.7511, xmax = -33.2476, ymax = 5.2718)
ufshape <- st_transform(ufshape, st_crs(shape))
regions_en <- tibble(
name_region = c('Norte', 'Nordeste', 'Sudeste', 'Sul', 'Centro Oeste'),
region_en = c("North", "Northeast", "Southeast", "South", "Mid-West")
)
ufshape <- ufshape |>
left_join(regions_en, by = "name_region") |>
mutate(name_state = if_else(name_state == 'Amazônas', true = 'Amazonas', false = name_state))
shape <- shape |>
left_join(ufshape |>
st_drop_geometry() |>
select(code_state, region_en), by = c('uf' = 'code_state'))
# Paleta de cores semelhante à do seu mapa
region_colors <- c(
"North" = "#3CAACF",
"Northeast" = "#D4EC88",
"Mid-West" = "#66C07E",
"Southeast" = "#A383D9",
"South" = "#DC8E4B"
)
pal <- colorFactor(palette = region_colors, domain = shape$region_en)
uf_labels <- ufshape |>
mutate(centroid = st_centroid(geom)) |>
st_drop_geometry() |>
bind_cols(st_coordinates(st_centroid(ufshape))) |>
select(name_state, abbrev_state, X, Y)
st_write(obj = shape, dsn = "data/gpkg_macro.gpkg", layer = "macro_shapes", driver = "GPKG", delete_dsn = TRUE)
st_write(obj = ufshape, dsn = "data/gpkg_uf.gpkg", layer = "uf_shapes", driver = "GPKG", delete_dsn = TRUE)
shape <- read_sf("data/gpkg_macro.gpkg")
ufshape <- read_sf("data/gpkg_uf.gpkg")
ufshape <- read_sf("data/gpkg_uf.gpkg")
ufshape_simples <- ms_simplify(shape, keep = 0.05, keep_shapes = TRUE)
saveRDS(ufshape_simples, "data/shape_uf_simp.rds")
runApp()
runApp()
spatial.tbl <- import("data/spatial.tbl.csv")
shape <- read_sf('data/shapefile_macro.json') |>
left_join(spatial.tbl |>
select(uf, macroregional, macroregional_geocode) |>
unique() |>
rename(uf_name = uf), by = c('code_macro' = 'macroregional_geocode'))
ufshape <- read_state(
year = 2020,
showProgress = FALSE,
simplified = TRUE
)
ufshape <- ufshape |>
st_crop(xmin = -73.9904, ymin = -33.7511, xmax = -33.2476, ymax = 5.2718)
ufshape <- st_transform(ufshape, st_crs(shape))
regions_en <- tibble(
name_region = c('Norte', 'Nordeste', 'Sudeste', 'Sul', 'Centro Oeste'),
region_en = c("North", "Northeast", "Southeast", "South", "Mid-West")
)
ufshape <- ufshape |>
left_join(regions_en, by = "name_region") |>
mutate(name_state = if_else(name_state == 'Amazônas', true = 'Amazonas', false = name_state))
shape <- shape |>
left_join(ufshape |>
st_drop_geometry() |>
select(code_state, region_en), by = c('uf' = 'code_state'))
# Paleta de cores semelhante à do seu mapa
region_colors <- c(
"North" = "#3CAACF",
"Northeast" = "#D4EC88",
"Mid-West" = "#66C07E",
"Southeast" = "#A383D9",
"South" = "#DC8E4B"
)
pal <- colorFactor(palette = region_colors, domain = shape$region_en)
uf_labels <- ufshape |>
mutate(centroid = st_centroid(geom)) |>
st_drop_geometry() |>
bind_cols(st_coordinates(st_centroid(ufshape))) |>
select(name_state, abbrev_state, X, Y)
st_write(obj = shape, dsn = "data/gpkg_macro.gpkg", layer = "macro_shapes", driver = "GPKG", delete_dsn = TRUE)
st_write(obj = ufshape, dsn = "data/gpkg_uf.gpkg", layer = "uf_shapes", driver = "GPKG", delete_dsn = TRUE)
shape <- read_sf("data/gpkg_macro.gpkg")
ufshape <- read_sf("data/gpkg_uf.gpkg")
library(sf)
library(rmapshaper)
shape <- read_sf("data/gpkg_macro.gpkg")
shape_simples <- ms_simplify(shape, keep = 0.05, keep_shapes = TRUE)
saveRDS(shape_simples, "data/shape_macro_simp.rds")
ufshape <- read_sf("data/gpkg_uf.gpkg")
ufshape_simples <- ms_simplify(shape, keep = 0.05, keep_shapes = TRUE)
saveRDS(ufshape_simples, "data/shape_uf_simp.rds")
shape_simples
shape
runApp()
ufshape |>
mutate(centroid = st_centroid(geom)) |>
st_drop_geometry() |>
bind_cols(st_coordinates(st_centroid(ufshape)))
ufshape |>
mutate(centroid = st_centroid(geom)) |>
st_drop_geometry() |>
bind_cols(st_coordinates(st_centroid(ufshape))) |>
select(name_state, abbrev_state, X, Y)
ufshape
shape <- readRDS("data/shape_macro_simp.rds")
ufshape <- readRDS("data/shape_uf_simp.rds")
shape
ufshape
shape <- read_sf("data/gpkg_macro.gpkg")
shape_simples <- ms_simplify(shape, keep = 0.05, keep_shapes = TRUE)
st_write(obj = shape_simples, dsn = "data/shape_macro_simp.gpkg", layer = "macro_shapes", driver = "GPKG", delete_dsn = TRUE)
ufshape <- read_sf("data/gpkg_uf.gpkg")
ufshape_simples <- ms_simplify(shape, keep = 0.05, keep_shapes = TRUE)
st_write(obj = ufshape_simples, dsn = "data/shape_uf_simp.gpkg", layer = "macro_shapes", driver = "GPKG", delete_dsn = TRUE)
shape_simples
shape <- readrd("data/shape_macro_simp.rds")
shape <- read_sf("data/shape_macro_simp.rds")
ufshape <- read_sf("data/shape_uf_simp.rds")
shape <- read_sf("data/shape_macro_simp.gpkg")
ufshape <- read_sf("data/shape_uf_simp.gpkg")
shape
ufshape
runApp()
shape <- read_sf("data/shape_macro_simp.gpkg")
ufshape <- read_sf("data/shape_uf_simp.gpkg")
uf_labels <- ufshape |>
mutate(centroid = st_centroid(geom)) |>
st_drop_geometry() |>
bind_cols(st_coordinates(st_centroid(ufshape))) |>
select(name_state, abbrev_state, X, Y)
ufshape
|>
ufshape |>
mutate(centroid = st_centroid(geom)) |>
st_drop_geometry() |>
bind_cols(st_coordinates(st_centroid(ufshape)))
runApp()
runApp()
ufshape
ufshape <- read_sf("data/gpkg_uf.gpkg")
ufshape
shape <- read_sf("data/gpkg_macro.gpkg")
shape
ufshape <- read_sf("data/gpkg_uf.gpkg")
ufshape
library(sf)
library(rmapshaper)
shape <- read_sf("data/gpkg_macro.gpkg")
shape_simples <- ms_simplify(shape, keep = 0.05, keep_shapes = TRUE)
st_write(obj = shape_simples, dsn = "data/shape_macro_simp.gpkg", layer = "macro_shapes", driver = "GPKG", delete_dsn = TRUE)
# saveRDS(shape_simples, "data/shape_macro_simp.rds")
ufshape <- read_sf("data/gpkg_uf.gpkg")
ufshape_simples <- ms_simplify(shape, keep = 0.05, keep_shapes = TRUE)
st_write(obj = ufshape_simples, dsn = "data/shape_uf_simp.gpkg", layer = "macro_shapes", driver = "GPKG", delete_dsn = TRUE)
# saveRDS(ufshape_simples, "data/shape_uf_simp.rds")
shape_simples
shape
shape_simples
shape
shape_simples
shape
shape_simples
shape
spatial.tbl <- import("data/spatial.tbl.csv")
shape <- read_sf('data/shapefile_macro.json') |>
left_join(spatial.tbl |>
select(uf, macroregional, macroregional_geocode) |>
unique() |>
rename(uf_name = uf), by = c('code_macro' = 'macroregional_geocode'))
ufshape <- read_state(
year = 2020,
showProgress = FALSE,
simplified = TRUE
)
ufshape <- ufshape |>
st_crop(xmin = -73.9904, ymin = -33.7511, xmax = -33.2476, ymax = 5.2718)
ufshape <- st_transform(ufshape, st_crs(shape))
regions_en <- tibble(
name_region = c('Norte', 'Nordeste', 'Sudeste', 'Sul', 'Centro Oeste'),
region_en = c("North", "Northeast", "Southeast", "South", "Mid-West")
)
ufshape <- ufshape |>
left_join(regions_en, by = "name_region") |>
mutate(name_state = if_else(name_state == 'Amazônas', true = 'Amazonas', false = name_state))
shape <- shape |>
left_join(ufshape |>
st_drop_geometry() |>
select(code_state, region_en), by = c('uf' = 'code_state'))
# Paleta de cores semelhante à do seu mapa
region_colors <- c(
"North" = "#3CAACF",
"Northeast" = "#D4EC88",
"Mid-West" = "#66C07E",
"Southeast" = "#A383D9",
"South" = "#DC8E4B"
)
pal <- colorFactor(palette = region_colors, domain = shape$region_en)
uf_labels <- ufshape |>
mutate(centroid = st_centroid(geom)) |>
st_drop_geometry() |>
bind_cols(st_coordinates(st_centroid(ufshape))) |>
select(name_state, abbrev_state, X, Y)
st_write(obj = shape, dsn = "data/gpkg_macro.gpkg", layer = "macro_shapes", driver = "GPKG", delete_dsn = TRUE)
st_write(obj = ufshape, dsn = "data/gpkg_uf.gpkg", layer = "uf_shapes", driver = "GPKG", delete_dsn = TRUE)
shape <- read_sf("data/gpkg_macro.gpkg")
ufshape <- read_sf("data/gpkg_uf.gpkg")
shape
ufshape
shape_simples <- ms_simplify(shape, keep = 0.05, keep_shapes = TRUE)
shape_simples
library(sf)
library(rmapshaper)
shape <- read_sf("data/gpkg_macro.gpkg")
shape_simples <- ms_simplify(shape, keep = 0.05, keep_shapes = TRUE)
st_write(obj = shape_simples, dsn = "data/shape_macro_simp.gpkg", layer = "macro_shapes", driver = "GPKG", delete_dsn = TRUE)
# saveRDS(shape_simples, "data/shape_macro_simp.rds")
ufshape <- read_sf("data/gpkg_uf.gpkg")
ufshape_simples <- ms_simplify(ufshape, keep = 0.05, keep_shapes = TRUE)
st_write(obj = ufshape_simples, dsn = "data/shape_uf_simp.gpkg", layer = "macro_shapes", driver = "GPKG", delete_dsn = TRUE)
# saveRDS(ufshape_simples, "data/shape_uf_simp.rds")
shape_simples
shape
ufshape_simples
runApp()
write_rds(shape, "data/shape_macro_simp.rds")
write_rds(ufshape, "data/shape_uf_simp.rds")
runApp()
runApp()
shiny::runApp()
?read_rds
??read_rds
runApp()
runApp()
uf_labels
library(shiny)
library(tidyr)
library(dplyr)
library(readr)
library(plotly)
library(rio)
library(MetBrewer)
library(leaflet)
library(sf)
# Auxiliary functions -------------------------------------------------------------------------
# Plotly for Country --------------------------------------------------------------------------
plot_grafico_artigo <- function(df, palette) {
quants <- rev(unique(df$quantile))
colors <- palette[seq_along(quants)]
max_valor <- max(df$maxvalues[is.finite(df$maxvalues)], df$cases, na.rm = TRUE)
df_max_round <- ceiling(max_valor / 50) * 50
df_max_round2 <- df_max_round + (df_max_round * 0.1)
df2 <- df |> mutate(maxvalues = ifelse(is.infinite(maxvalues), df_max_round2, maxvalues))
fig <- plot_ly()
for(i in seq_along(quants)) {
fig <- fig |>
add_trace(
data = df2 |> filter(quantile == quants[i]),
type = 'scatter',
mode = 'lines',
x = ~date,
y = ~maxvalues,
text = ~message,
fill = 'tozeroy',
line = list(color = colors[i]),
fillcolor = colors[i],
name = quants[i],
hovertemplate = paste0("<b>", quants[i],"</b>: %{text}<extra></extra>")
)
}
fig |>
add_trace(
data = df2,
type = 'scatter', mode = 'lines',
x = ~date, y = ~cases,
line = list(color = "black"),
name = "Cases",
hovertemplate = "<b>Cases</b>: %{y:,.0f}<extra></extra>"
) |>
layout(
hovermode = "x unified",
xaxis = list(title = "Date", showgrid = FALSE, zeroline = FALSE),
yaxis = list(title = "Dengue cases", showgrid = FALSE, zeroline = FALSE),
legend = list(itemclick = FALSE, itemdoubleclick = FALSE)
)
}
# Plotly for UF -------------------------------------------------------------------------------
plot_grafico_artigo_uf <- function(df, UF, palette) {
quants <- rev(unique(df$quantile))
colors <- palette[seq_along(quants)]
max_valor <- df |> filter(uf == UF, is.finite(df$maxvalues)) |> select(maxvalues, cases) |> max(na.rm = TRUE)
df_max_round <- ceiling(max_valor / 50) * 50
df_max_round2 <- df_max_round + (df_max_round * 0.1)
df2 <- df |> filter(uf == UF) |> mutate(maxvalues = ifelse(is.infinite(maxvalues), df_max_round2, maxvalues))
fig <- plot_ly()
for(i in seq_along(quants)) {
fig <- fig |>
add_trace(
data = df2 |> filter(quantile == quants[i]),
type = 'scatter',
mode = 'lines',
x = ~date,
y = ~maxvalues,
text = ~message,
fill = 'tozeroy',
line = list(color = colors[i]),
fillcolor = colors[i],
name = quants[i],
hovertemplate = paste0("<b>", quants[i],"</b>: %{text}<extra></extra>")
)
}
fig |>
add_trace(
data = df2,
type = 'scatter', mode = 'lines',
x = ~date, y = ~cases,
line = list(color = "black"),
name = "Cases",
hovertemplate = "<b>Cases</b>: %{y:,.0f}<extra></extra>"
) |>
layout(
hovermode = "x unified",
xaxis = list(title = "Date", showgrid = FALSE, zeroline = FALSE),
yaxis = list(title = "Dengue cases", showgrid = FALSE, zeroline = FALSE),
legend = list(itemclick = FALSE, itemdoubleclick = FALSE)
)
}
# Plotly for HD -------------------------------------------------------------------------------
plot_grafico_artigo_macro_por_uf <- function(df, UF, palette, height_per_plot = 300) {
df_uf <- df |> filter(uf == UF, macroregional != "")
regs <- sort(unique(df_uf$macroregional))
n_regs <- length(regs)
plots <- vector("list", n_regs)
for (j in seq_along(regs)) {
reg_j <- regs[j]
df_reg <- df_uf |> filter(macroregional == reg_j)
quants <- rev(unique(df_reg$quantile))
colors <- palette[seq_along(quants)]
max_valor <- df_reg |>
filter(is.finite(maxvalues)) |>
summarise(m = max(maxvalues, cases, na.rm = TRUE)) |>
pull(m)
df_max_rnd2 <- ceiling(max_valor / 50) * 50 * 1.1
df2 <- df_reg |>
mutate(maxvalues = ifelse(is.infinite(maxvalues), df_max_rnd2, maxvalues))
fig_i <- plot_ly()
for (i in seq_along(quants)) {
fig_i <- fig_i |>
add_trace(
data = df2 |> filter(quantile == quants[i]),
type = 'scatter',
mode = 'lines',
x = ~date,
y = ~maxvalues,
fill = 'tozeroy',
line = list(color = colors[i]),
fillcolor = colors[i],
name = quants[i],
hovertemplate= paste0("<b>", quants[i], "</b>: %{y:,.0f}<extra></extra>")
)
}
fig_i <- fig_i |>
add_trace(
data = df2,
type = 'scatter',
mode = 'lines',
x = ~date,
y = ~cases,
line = list(color = "black"),
name = "Cases",
hovertemplate= "<b>Cases</b>: %{y:,.0f}<extra></extra>"
) |>
layout(
margin = list(t = 20, b = 20, l = 20, r = 20),
xaxis = list(showgrid = FALSE, zeroline = FALSE, title = NULL),
yaxis = list(showgrid = FALSE, zeroline = FALSE, title = NULL),
showlegend = FALSE
)
plots[[j]] <- fig_i
}
ncol <- min(2, n_regs)
nrow <- ceiling(n_regs / ncol)
p <- subplot(
plotlist = plots,
nrows = nrow,
margin = 0.02,
shareX = TRUE,
shareY = FALSE,
titleX = FALSE,
titleY = FALSE
)
title_hd <- lapply(seq_along(regs), function(i) {
coli <- (i - 1) %% ncol
rowi <- floor((i - 1) / ncol)
xc <- (coli + 0.5) / ncol
y1 <- 1 - (rowi / nrow)
list(
x = xc,
y = y1 - 0.01,
xref = "paper",
yref = "paper",
text = regs[i],
showarrow = FALSE,
xanchor = "center",
yanchor = "bottom",
font = list(size = 12)
)
})
total_height <- height_per_plot * nrow
p |>
layout(
height = total_height,
hovermode = "x unified",
annotations = title_hd
)
}
# Hover message for plotly --------------------------------------------------------------------
message_hover <- function(df){
df |>
mutate(
message = case_when(
quantile == "Below the median,\ntypical" ~ paste0("<", format(round(maxvalues),
nsmall=0,
big.mark=",")),
quantile == "Moderately high,\nfairly typical" ~ paste0(">=", format(round(minvalues),
nsmall=0,
big.mark=","),
" and <", format(round(maxvalues),
nsmall=0,
big.mark=",")),
quantile == "Fairly high,\natypical" ~ paste0(">=", format(round(minvalues),
nsmall=0,
big.mark=","),
" and <", format(round(maxvalues),
nsmall=0,
big.mark=",")),
quantile == "Exceptionally high,\nvery atypical" ~ paste0(">=", format(round(minvalues),
nsmall=0,
big.mark=","))
)
)
}
# Reading data --------------------------------------------------------------------------------
observed <- import("data/observed.csv.gz")
df.prob.22_23 <- import(file = "samples/macro.prob.22_23.csv.gz")
df.prob.23_24 <- import(file = "samples/macro.prob.23_24.csv.gz")
df.prob.24_25 <- import(file = "samples/macro.prob.24_25.csv.gz")
shape <- read_rds("data/shape_macro_simp.rds")
ufshape <- readRDS("data/shape_uf_simp.rds")
# Datasets for Brazil, UFs and Health Regions -------------------------------------------------
t1br <- import("data/t1br.csv.gz") |>
message_hover()
t2br <- import("data/t2br.csv.gz") |>
message_hover()
t3br <- import("data/t3br.csv.gz") |>
message_hover()
t1uf <- import("data/t1uf.csv.gz") |>
message_hover()
t2uf <- import("data/t2uf.csv.gz") |>
message_hover()
t3uf <- import("data/t3uf.csv.gz") |>
message_hover()
t1hd <- import("data/t1hd.csv.gz") |>
message_hover()
t2hd <- import("data/t2hd.csv.gz") |>
message_hover()
t3hd <- import("data/t3hd.csv.gz") |>
message_hover()
# Color palettes ------------------------------------------------------------------------------
region_colors <- c(
"North" = "#3CAACF",
"Northeast" = "#D4EC88",
"Mid-West" = "#66C07E",
"Southeast" = "#A383D9",
"South" = "#DC8E4B"
)
uf_labels <- ufshape |>
mutate(centroid = st_centroid(geom)) |>
st_drop_geometry() |>
bind_cols(st_coordinates(st_centroid(ufshape))) |>
select(name_state, abbrev_state, X, Y)
uf_labels
write_rds(uf_labels, "data/uf_labels.rds")
shiny::runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
rsconnect::writeManifest()
runApp()
rsconnect::writeManifest()
